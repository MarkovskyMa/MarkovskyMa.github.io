<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://markovskyma.github.io</id>
    <title>Gridea</title>
    <updated>2020-12-17T14:37:35.096Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://markovskyma.github.io"/>
    <link rel="self" href="https://markovskyma.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://markovskyma.github.io/images/avatar.png</logo>
    <icon>https://markovskyma.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[今日坑，何日填？]]></title>
        <id>https://markovskyma.github.io/post/python-everyday/</id>
        <link href="https://markovskyma.github.io/post/python-everyday/">
        </link>
        <updated>2020-12-16T04:23:09.000Z</updated>
        <content type="html"><![CDATA[<h1 id="20201216">2020/12/16</h1>
<p>Python标准库阅读：<a href="https://docs.python.org/zh-cn/3/library/datatypes.html">数据类型</a></p>
<p>NumPy中的非原地操作会导致新开辟内存和复制对象，所以就很慢！这两天被这个坑了很久！</p>
<p>同时发现一个逻辑错误：</p>
<ul>
<li>一个不等长列表，需要把内容填到NumPy数组中，并且要取平均值。
<ul>
<li>先确定数组大小后，创建zeros数组，然后往数组中填（复制）列表内容。最后用mean函数求固定轴（axis）上的平均值。（这样是错的！！因为嵌套的多维列表形状是不固定的，不能直接mean，需要累加后求平均，避免0值的干扰。）</li>
<li>同时，mean函数会创建一个新对象（新的内存空间），所以不如直接原地操作累加再作除法快！</li>
</ul>
</li>
</ul>
<p>Docker<br>
今日接触到Docker。Docker并不神奇，粗暴理解就是一个轻量级Linux虚拟机(￣▽￣)&quot;。<br>
（<strong>好像不是这样，Docker似乎更像是隔离了宿主机中的运行环境的容器</strong>）</p>
<p>所以该如何用Docker来创建TensorFlow的环境呢？TF官网给出的方法报错了！因为服务器上的驱动不支持最新的CUDA11，只支持到CUDA10.2。拉取了10.2的CUDA Docker镜像，成功确认了CUDA版本，但是TensorFlow还是错误！还是不支持CUDA10.2！（谷歌(￣▽￣)&quot;）<br>
一番搜索发现：可以自己创建镜像（写Dockerfile），运行容器的时候指定运行时为nvidia即可。（具体操作尚未成功，待更新……）<br>
看看TensorFlow Docker 镜像的Docker layer：<a href="https://hub.docker.com/layers/tensorflow/tensorflow/latest-gpu/images/sha256-67dbafa3e7918a3efc67db49063aebdb282a0ebb1c124b7ca0db18207e6d7a22?context=explore">在这里</a> 就知道要求了CUDA的版本为11.</p>
<p>Docker中Dockerfile用来构建image镜像，运行的image就是container容器。Kubernetes（k8s）是用来管理大规模容器的。<br>
Dockerfile资料：<a href="">https://www.runoob.com/docker/docker-dockerfile.html</a></p>
<p>要明白，Docker的目的是简单的打包环境并且部署，所以只有从Dockerfile构建image，没有从image导出Dockerfile。</p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2442809"><label class="task-list-item-label" for="task-item-2442809"> 了解一下KVM、PVE、Kubernetes、QEMU、VBox、Hyper-V、Vargrant。</label></li>
</ul>
<p>这篇简短的文章解答了一个关键性的问题：容器和虚拟机的区别。<br>
<a href="https://zhuanlan.zhihu.com/p/165257806">Docker容器的&quot;单进程模型&quot; - Kevin Yan的文章 - 知乎</a><br>
<a href="https://v2ex.com/t/661334">还有这个v2ex上地讨论</a><br>
虚拟机是一个完整的系统，系统在其中管理着其中的各种线程，进入这个系统之后就和宿主机没啥关系了。<br>
容器是宿主机上隔离出来的一个空间，看起来好像是一个虚拟机，但实际上这个系统只是宿主机上的一个进程。正因为是宿主机上的单进程，所以容器比虚拟机更轻量。<br>
容器启动时执行程序a，而a由启动了程序b和c。程序a的进程就是docker的主进程，因为docker的能力仅限于维持主进程，所以b和c的状态如何docker是不知道的。<br>
正因为如此！！docker的合理用法是做好一件事（这不就是Unix哲学？），复杂任务就组合多个docker（甚至是集群）完成。因此，kubernetes、docker compose这样的容器组合工具就来了。<br>
（如此说来，容器组合工具不就成了操作系统了？容器就是进程？嗐~人类就是这样无聊地发明者同样地东西）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python源码深度剖析笔记]]></title>
        <id>https://markovskyma.github.io/post/python-yuan-ma-shen-du-pou-xi-bi-ji/</id>
        <link href="https://markovskyma.github.io/post/python-yuan-ma-shen-du-pou-xi-bi-ji/">
        </link>
        <updated>2020-12-14T11:26:06.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>人生苦短，你该用啥？</p>
</blockquote>
<p>Python确实是一门优雅简洁的语言。这里是《Python源码深度剖析》这门专栏的笔记。（都是自己看过之后的总结，不会直接搬过来，毕竟原专栏是收费的。另外：技术菜鸟，轻喷(✿◡‿◡)）<br>
链接：<a href="">https://www.imooc.com/read/76</a></p>
<p>首先列一个专栏目录：</p>
<ol>
<li>开篇</li>
<li>对象模型</li>
<li>内建对象</li>
<li>虚拟机</li>
<li>函数机制</li>
<li>类机制</li>
<li>生成器与协程</li>
<li>内存管理机制</li>
<li>总结</li>
</ol>
<h1 id="对象模型">对象模型</h1>
<p>本章讲Python对象模型。**首先，什么是对象模型？**简单说就是Python中的对象机制设计。<br>
面向对象理论中类和对象是区分开的。类是一系列对象的抽象，对象是类的一个实例。Python语法层面其实也是区分了类型和实例（类和对象），但是却把它们都视为对象。（绕晕了吧(((φ(◎ロ◎;)φ)))）</p>
<h2 id="对象-类型和类">对象、类型和类</h2>
<p>几个有用的函数和对象：</p>
<ul>
<li><code>type() or __class__</code>：获取对象的类型，不追溯父类。</li>
<li><code>issubclass()</code>：判断两个类是否为继承关系，<strong>自己可以是自己的子类（int是int的子类）</strong></li>
<li><code>isinstance()</code>：判断对象是否为类的实例，<strong>可以向父类追溯</strong>。<br>
还有：</li>
<li><code>object</code>是所有类的基类，所谓base class。另外，<code>object()</code>还是一个内置函数，返回一个对象。</li>
<li><code>type</code>是一个类型，是对所有Python对象类型的一个抽象，毕竟所有对象都会有类型。所以type的实例就成为类型对象，它表示一个类型。</li>
</ul>
<p>根据这个解释：</p>
<ol>
<li>Python一切皆对象，对象有类型（实例有类），类有基类。所以所有对象都是object基类的实例。</li>
<li>Python中的类都有三层身份：类、类型和对象（class, type, object）：
<ol>
<li>作为类，它有基类，向上追溯就是<code>object</code>类。</li>
<li>作为类型，它可以用于创建对象（实例）。</li>
<li>作为对象，它是某个类的实例，所以它有名为类型的属性（<code>__class__</code>），这个类就是<code>type类</code>。</li>
</ol>
</li>
<li>举个栗子：<code>int</code>这个内置类型：
<ol>
<li>作为类，可以追溯基类到<code>object</code>。</li>
<li>作为类型，各种整数对象都是它的实例。</li>
<li>作为对象，它的类型就是<code>type</code>。</li>
</ol>
</li>
<li>自定义类同样满足这个情况，包括<code>object</code>和<code>type</code>这两个类都是这样。</li>
<li>数字1在Python就是一个身份：对象，int是它的类型。</li>
</ol>
<h2 id="变量和对象可变对象和不可变对象定长对象与不定长对象">变量和对象，可变对象和不可变对象，定长对象与不定长对象</h2>
<p>变量在Python中只是对象的一个名字，所以<code>a = 10; b = a</code>中<code>a</code>和<code>b</code>其实指向相同一个整数对象（同一片内存），用<code>id()</code>函数可以判断。<br>
对象在Python中分为可变对象和不可变对象。例如：</p>
<ul>
<li>整数对象不可变，所以<code>a += 1</code>实际上是把<code>a</code>指向了一个新的对象，其值为<code>a+1</code>。</li>
<li>列表对象可变，所以<code>list.append()</code>直接修改的就是列表对象。
<ul>
<li>列表作为内置类型，在虚拟机中为一个Ｃ语言实现的动态数组，变量名指向列表头部。<br>
对象也分为定长和不定长，即对象的大小是否固定，用<code>sys.getsizeof()</code>可获取对象大小。例如：</li>
</ul>
</li>
<li>整数、字符串都是不定长对象，因为它们需要表示任意长度的整数和字符串。</li>
<li>浮点数是定长对象，因为浮点数在虚拟机中对应一个C语言中的double。而且浮点数的原理就是在固定位数之内通过变换小数点的位置表示不同大小的小数。</li>
</ul>
<h2 id="窥探源码">窥探源码</h2>
<ul>
<li>PyObject, PyVarObject</li>
<li>PyTypeObject</li>
<li>PyType_Type</li>
<li>PyBaseObject_Type</li>
</ul>
<p>PyObject是所有Python对象（注意，Python中一切皆对象）共有地一个结构体。其中两个成员很重要：</p>
<ul>
<li>引用计数，记录引用该对象的变量个数，以此实现垃圾回收。</li>
<li>类型指针，指向一个类型对象，类型对象也是一个结构体，其中保存着这个类型的相关信息。</li>
</ul>
<pre><code class="language-C">typedef struct _object {
    _PyObject_HEAD_EXTRA
    Py_ssize_t ob_refcnt;
    struct _typeobject *ob_type;
} PyObject;
</code></pre>
<p>至于<code>_PyObject_HEAD_EXTRA</code>，这是一个宏，用于生成两个指向<code>_object</code>结构体的指针来实现双向链表。作用是跟踪所有<strong>活跃堆对象</strong>。（这个没有细说）</p>
<h1 id="内建对象">内建对象</h1>
<p>本章逐一分析Python的内建类型，比如说整型、浮点型、字符串、列表、字典等，看看它们在Python虚拟机层面是如何用C语言实现的。</p>
<h1 id="虚拟机">虚拟机</h1>
<p>Python是运行在Python虚拟机上的，所以本章节讲Python虚拟机、字节码、GIL以及Python模块加载机制。</p>
<h1 id="函数机制">函数机制</h1>
<p>Python中函数也是对象，这一章讲的就是函数在讲虚拟机中的函数对象、调用栈，以及高阶函数、装饰器等内容。</p>
<h1 id="类机制">类机制</h1>
<p>Python作为一个完全的面向对象语言，“类”自然是不可或缺的。这一章就分析类在虚拟机中的实现方法，配合继承、属性描述符、元类等内容。</p>
<h1 id="生成器与协程">生成器与协程</h1>
<p>生成器是Python的一大特点，和协程配合可以实现高并发。本章讲虚拟机中生成器和协程的实现原理。</p>
<h1 id="内存管理机制">内存管理机制</h1>
<p>本章讲Python的内存管理机制，主要是针对垃圾回收机制。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[图网络关系提取]]></title>
        <id>https://markovskyma.github.io/post/tu-wang-luo-guan-xi-ti-qu/</id>
        <link href="https://markovskyma.github.io/post/tu-wang-luo-guan-xi-ti-qu/">
        </link>
        <updated>2020-12-14T06:37:22.000Z</updated>
        <content type="html"><![CDATA[<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-7066108"><label class="task-list-item-label" for="task-item-7066108"> 实验室的论文分享，贴过来</label></li>
</ul>
<h1 id="double-graph-based-reasoning-for-document-level-relation-extraction">Double Graph Based Reasoning for Document-level Relation Extraction</h1>
<p>EMNLP 2020上的一篇文章，讲的是用图网络来做文档级别的关系提取。因为是文档级别，所以面临跨句子问题，关系推理问题。例如：</p>
<pre><code>sentence 1: entity_1 &lt;-&gt; entity_2 (relation 1)
sentence 2: entity_1 &lt;-&gt; entity_3 (relation 2)
==&gt; entity_1&lt;-&gt; entity_3 (relation 3)
</code></pre>
<p>这里的关系提取是实体和实体之间的关系分类（数据集就是这样规定的），实体在文中的具体呈现是mention（单词序列，一个实体的不同mention可能实际的字符串不完全相同）。（另一种关系提取是对mention之间的关系进行分类，因为相同实体的mention在上下文中会有不同的意思）</p>
<p><img src="https://markovskyma.github.io/post-images/1607936747561.png" alt="模型的整体架构" loading="lazy"><br>
该模型的整体流程就是：</p>
<ul>
<li>编码层，对单词进行编码。</li>
<li>Mention图的构建，以及节点更新。</li>
<li>实体图的构建和路径表示。</li>
<li>根据路径表示进行关系分类。</li>
</ul>
<p><img src="https://markovskyma.github.io/post-images/1607936946518.png" alt="Mention图" loading="lazy"><br>
本模型的重点之一是Mention图。图中的节点为数据集中的mention标注和一个表示全文信息的虚拟节点。图上的边有三种：</p>
<ul>
<li>指向同一个实体的mention两两相连。</li>
<li>同一个句子中的mention两两相连。</li>
<li>所有mention节点和全文信息节点相连。<br>
然后用GCN对节点表示进行更新。（其实这里的GCN就是一个简单的神经网络，权重代表的就是边）</li>
</ul>
<p><img src="https://markovskyma.github.io/post-images/1607940959670.png" alt="实体图" loading="lazy"><br>
本文第二个重点是实体图。把Mention图中指向同一个实体的Mention表示做平均即为实体表示。<br>
构建实体图的目的是进行路径表示，在图论中路径就是两个可连通节点之间的一条通路，在关系分类中路径表示可视为关系表示。<br>
两个节点之间的路径有多条，而每条路径可分为多个有向边的集合。比如说：</p>
<pre><code>a &lt;-&gt; b &lt;-&gt; c ==&gt; {a -&gt; b, b -&gt; a, b -&gt; c, c -&gt; b}
</code></pre>
<p>（两个实体之间肯定是连通的，不然判断什么关系呢？┑(￣Д ￣)┍。至于采用有向图的设计，这是作者的意思。）<br>
<strong>所以，关系表示是各条路径表示的attention，路径表示是有向边表示的拼接，有向边表示是神经网络编码后的实体表示，实体表示是mention表示的平均池化。</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[天煞力扣]]></title>
        <id>https://markovskyma.github.io/post/dead-leetcode/</id>
        <link href="https://markovskyma.github.io/post/dead-leetcode/">
        </link>
        <updated>2020-12-14T04:54:09.000Z</updated>
        <content type="html"><![CDATA[<p>这里是力扣上的做题记录，🤦‍。</p>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-512936"><label class="task-list-item-label" for="task-item-512936"> 首先把前三百题做完。编程语言就用Python、C和C++。</label></li>
</ul>
<p>本页面主要用于提供目录索引。</p>
<h1 id="链表">链表</h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea]]></title>
        <id>https://markovskyma.github.io/post/gridea/</id>
        <link href="https://markovskyma.github.io/post/gridea/">
        </link>
        <updated>2020-12-14T02:27:41.000Z</updated>
        <content type="html"><![CDATA[<h1 id="个人博客">个人博客</h1>
<p>一直想着建一个自己的博客，但是不知道怎么下手。一番调研，选择了Gridea这款软件，因为它简单（我懒）。<br>
简单调研了一下。所谓博客，本质上是一个网站，所以是需要正儿八经的服务端和客户端的。服务端就是服务器，客户端就是浏览器。对于硬核人士，当然是用自己的服务器，写自己的后端和前端，涉及到数据库、计算机网络、网页设计等等。对想省心省力者，可以用静态网页生成器，把生成的网页部署到支持静态网页渲染的代码仓库网站上。<br>
具体技术上来举例：</p>
<ul>
<li>动态博客：租云服务器（或者自己的服务器配合内网穿透或者公网IP）、Python Flask等后端框架、Vue等前端。</li>
<li>静态博客：GitHub Pages提供仓库和服务器、Hexo用作静态网页生成器。</li>
</ul>
<h1 id="gridea">Gridea</h1>
<p>而对于我等懒人，一行代码都不想写，只想轻松写个人博客，CSDN、知乎专栏这种知识分享网站是个好选择。但是！本人又不想被平台绑架！（该死的小资情调）最终选择了Gridea这款软件。</p>
<ul>
<li>项目主页：<a href="">https://gridea.dev/</a></li>
<li>代码仓库：<a href="">https://github.com/getgridea/gridea</a></li>
</ul>
<p>Gridea说白了就是把文字编辑器、静态网页生成器、静态网页发布工具统一在了一个软件当中。Gridea中可以直接用Markdown写文章，自动生成网页并且发布到服务器中。<br>
所以，Gridea的数据分为两部分：<strong>源数据和生成的网页数据</strong>。在设置项中可以更改源数据的保存位置，配合OneDrive之类的同步盘或者百度网盘之类的备份盘可以保存自己的数据。</p>
<h2 id="使用流程">使用流程</h2>
<ul>
<li>GitHub创建博客仓库，注意要使用“用户名.github.io”作为仓库名称，用户名就是注册GitHub时候的用户名，而且得是公开仓库。</li>
<li>生成GitHub用户的token，Settings -&gt; Developer Settings -&gt; Personal access tokens，只勾选repo相关的选项即可。Gridea可以通过这个token使用Github的API来管理博客仓库。</li>
<li>Gridea软件中设置一下GitHub Pages选项即可。CNAME可以不用，分支填写master就行。</li>
</ul>
<h2 id="待解决问题">待解决问题</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-8684503"><label class="task-list-item-label" for="task-item-8684503"> 怎么对文章进行归档？没搞明白这个逻辑。</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3140035"><label class="task-list-item-label" for="task-item-3140035"> 官方何时能够支持Gitee Pages的部署呢？毕竟GitHub服务器在国外，时常抽风。</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-5962221"><label class="task-list-item-label" for="task-item-5962221"> 评论功能，官方提供了评论功能，但还没有研究过。</label></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://markovskyma.github.io/post/hello-gridea/</id>
        <link href="https://markovskyma.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>